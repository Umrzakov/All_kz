import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import { OAuth2Client } from 'google-auth-library';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import OpenAI from 'openai'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º OpenAI

dotenv.config();

console.log("üîë OpenAI KEY =", process.env.OPENAI_API_KEY);

const app = express();
const port = process.env.PORT || 3001;
const CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const oauth2Client = new OAuth2Client(CLIENT_ID);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∏ CORS
app.use(express.json());
app.use(cors());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch((err) => console.error('–û—à–∏–±–∫–∞ MongoDB:', err));

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  googleId: { type: String, unique: true, sparse: true },
  email: { type: String, required: true, unique: true },
  name: String,
  password: String // –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å
});

const User = mongoose.model('User', userSchema);

// –í–∞–ª–∏–¥–∞—Ü–∏—è Google-—Ç–æ–∫–µ–Ω–∞
const verifyToken = async (token) => {
  const ticket = await oauth2Client.verifyIdToken({
    idToken: token,
    audience: CLIENT_ID,
  });
  return ticket.getPayload();
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á API –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ OpenAI
});

// ‚úÖ –†–æ—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
app.post('/api/auth/google', async (req, res) => {
  const { token } = req.body;

  try {
    const googleUser = await verifyToken(token);
    let user = await User.findOne({ googleId: googleUser.sub });

    if (!user) {
      user = new User({
        googleId: googleUser.sub,
        email: googleUser.email,
        name: googleUser.name,
      });
      await user.save();
    }

    const jwtToken = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({ token: jwtToken });

  } catch (error) {
    console.error(error);
    res.status(401).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google' });
  }
});

// ‚úÖ –†–æ—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Email/–ø–∞—Ä–æ–ª—å
app.post('/api/auth/register', async (req, res) => {
  const { email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const user = new User({ email, password }); // –ø–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    await user.save();

    res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω' });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// ‚úÖ –†–æ—É—Ç –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ Email/–ø–∞—Ä–æ–ª—å
app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user || user.password !== password) { // ‚ö†Ô∏è –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π bcrypt
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞' });
    }

    const jwtToken = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({ token: jwtToken });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
});

// ‚úÖ –†–æ—É—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å OpenAI
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/chat
app.post("/api/chat", async (req, res) => {
  const { message } = req.body;  // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞

  try {
    const chatCompletion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: message }],
    });

    res.json({ reply: chatCompletion.choices[0].message.content });  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API");  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
  }
});



// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
